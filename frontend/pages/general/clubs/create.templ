package clubs

import "github.com/nicksnyder/go-i18n/v2/i18n"
import "github.com/anchamber-studios/hevonen/frontend/layouts"
import "github.com/anchamber-studios/hevonen/frontend/types"
import "github.com/anchamber-studios/hevonen/frontend/components/form"
import "github.com/anchamber-studios/hevonen/lib"
import ctypes "github.com/anchamber-studios/hevonen/services/club/shared/types"

type CreateClubFormProps struct {
	Errors map[string]*lib.ValidationError
	Values ctypes.ClubCreate
}

templ CreateForm(tr *i18n.Localizer, props CreateClubFormProps) {
	@createClubForm(tr, props)
}

templ CreateFormWL(session types.Session, tr *i18n.Localizer, props CreateClubFormProps) {
	@layouts.BasicLayout(session, layouts.LayoutProps{
		Title: tr.MustLocalize(&i18n.LocalizeConfig{
			DefaultMessage: &i18n.Message{
				ID:    "club.form.create.title",
				Other: "Create a club",
			},
		}),
		Content: createClubForm(tr, props),
	})
}

templ createClubForm(tr *i18n.Localizer, props CreateClubFormProps) {
	@form.Form(tr, form.FormProps{
		Title:     "club.form.create.title",
		Action:    "/c/new",
		SaveLabel: "save",
	}) {
		@form.FormFieldText(tr, form.FormFieldProps{
			Label:       "club.form.name",
			Key:         "name",
			Value:       props.Values.Name,
			Placeholder: "",
			Required:    true,
			Errors:      getError("name", props.Errors),
		})
		@form.FormFieldTextarea(tr, form.FormFieldProps{
			Label:       "club.form.description",
			Key:         "description",
			Value:       props.Values.Description,
			Placeholder: "",
		})
		@form.FormFieldUrl(tr, form.FormFieldProps{
			Label:       "club.form.website",
			Key:         "website",
			Value:       props.Values.Website,
			Placeholder: "",
		})
		@form.FormFieldEmail(tr, form.FormFieldProps{
			Label:       "club.form.email",
			Key:         "email",
			Value:       props.Values.Email,
			Placeholder: "",
			Required:    true,
		})
		@form.FormFieldPhone(tr, form.FormFieldProps{
			Label:       "club.form.phone",
			Key:         "phone",
			Value:       props.Values.Phone,
			Placeholder: "",
			Required:    true,
		})
	}
}

func getError(name string, errors map[string]*lib.ValidationError) []*lib.ValidationError {
	if errors == nil {
		return []*lib.ValidationError{}
	}
	if v, ok := errors[name]; ok {
		return []*lib.ValidationError{v}
	}
	return []*lib.ValidationError{}
}
