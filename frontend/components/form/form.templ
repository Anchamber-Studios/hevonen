package form

import "github.com/nicksnyder/go-i18n/v2/i18n"
import "fmt"
import "github.com/anchamber-studios/hevonen/frontend/theme"
import "github.com/anchamber-studios/hevonen/lib"

type FormProps struct {
	Title     string
	Action    string
	SaveLabel string
}

templ Form(tr *i18n.Localizer, props FormProps) {
	<form
 		class="p-2 w-full max-w-2xl"
 		hx-post={ props.Action }
 		hx-push-url="true"
 		hx-swap="outerHTML"
	>
		<h1 class="text-2xl font-bold mb-4">
			{ tr.MustLocalize(&i18n.LocalizeConfig{MessageID: props.Title}) }
		</h1>
		{ children... }
		<button type="submit" class={ fmt.Sprintf("my-2 px-8 py-1 %s", theme.PrimaryActionBGColor) }>
			{ tr.MustLocalize(&i18n.LocalizeConfig{
				DefaultMessage: &i18n.Message{
					ID: "save",
					Other: "Save",
				}}) 
			 }
		</button>
	</form>
}

type FormFieldProps struct {
	Label       string
	Value       string
	Key         string
	Messages    []string
	Errors      []*lib.ValidationError
	Placeholder string
	Readonly    bool
	Required    bool
}

templ FormFieldEmail(tr *i18n.Localizer, props FormFieldProps) {
	<div class="pb-2">
		@label(tr, props)
		<input
 			type="email"
 			autocomplete="email"
 			value={ props.Value }
 			id={ props.Key }
 			name={ props.Key }
 			readonly?={ props.Readonly }
 			required?={ props.Required }
 			class={ inputClass(props) }
		/>
		@formHints(tr, props)
	</div>
}

templ FormFieldText(tr *i18n.Localizer, props FormFieldProps) {
	<div class="pb-2">
		@label(tr, props)
		<input
 			type="text"
 			value={ props.Value }
 			id={ props.Key }
 			name={ props.Key }
 			readonly?={ props.Readonly }
 			required?={ props.Required }
 			class={ inputClass(props) }
		/>
		@formHints(tr, props)
	</div>
}

templ FormFieldPhone(tr *i18n.Localizer, props FormFieldProps) {
	<div class="pb-2">
		@label(tr, props)
		<input
 			type="phone"
 			value={ props.Value }
 			id={ props.Key }
 			name={ props.Key }
 			readonly?={ props.Readonly }
 			required?={ props.Required }
 			class={ inputClass(props) }
		/>
		@formHints(tr, props)
	</div>
}

templ FormFieldUrl(tr *i18n.Localizer, props FormFieldProps) {
	<div class="pb-2">
		@label(tr, props)
		<input
 			type="url"
 			value={ props.Value }
 			id={ props.Key }
 			name={ props.Key }
 			readonly?={ props.Readonly }
 			required?={ props.Required }
 			class={ inputClass(props) }
		/>
		@formHints(tr, props)
	</div>
}

func inputClass(props FormFieldProps) string {
	if len(props.Errors) > 0 {
		return fmt.Sprintf("opacity-90 w-full p-1 border-2 %s %s", theme.DefaultTextInput, theme.DefaultBorderColorError)
	} else {
		return fmt.Sprintf("opacity-90 w-full p-1 %s", theme.DefaultTextInput)
	}
}

templ formHints(tr *i18n.Localizer, props FormFieldProps) {
	if (len(props.Errors) > 0) {
		for _, err := range props.Errors {
			<p class={ fmt.Sprintf("text-xs %s", theme.DefaultTextColorError) }>
				{ tr.MustLocalize(&i18n.LocalizeConfig{DefaultMessage: &i18n.Message{
					ID: err.TranslationKey,
					Other: err.TranslationKey,
				}}) }
			</p>
		}
	}
	if (len(props.Messages) > 0) {
		for _, message := range props.Messages {
			<p class={ fmt.Sprintf("text-xs %s", theme.DefaultTextColor) }>
				{ tr.MustLocalize(&i18n.LocalizeConfig{DefaultMessage: &i18n.Message{
					ID: message,
					Other: message,
				}}) }
			</p>
		}
	}
}

templ label(tr *i18n.Localizer, props FormFieldProps) {
	<label
 		for={ props.Key }
 		if len(props.Errors) > 0 {
			class={ fmt.Sprintf("%s", theme.DefaultTextColorError) }
		} else {
			class={ fmt.Sprintf("%s", theme.DefaultTextColor) }
		}
	>
		{ tr.MustLocalize(&i18n.LocalizeConfig{MessageID: props.Label}) }
	</label>
}
